
from flask import Flask, request, jsonify
import yt_dlp
import os
import tempfile
import re

app = Flask(__name__)

def clean_subtitles(subtitle_file):
    """
    –û—á–∏—â–∞–µ—Ç —Å—É–±—Ç–∏—Ç—Ä—ã –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç—Ä–µ–∑–∫–æ–≤ –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    """
    try:
        with open(subtitle_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫
        content = re.sub(r'^\d+\n', '', content, flags=re.MULTILINE)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: 00:00:00,000 --> 00:00:00,000)
        content = re.sub(r'\d{2}:\d{2}:\d{2},\d{3} --> \d{2}:\d{2}:\d{2},\d{3}\n', '', content)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        content = re.sub(r'\n\n+', '\n', content)
        
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        content = re.sub(r'<[^>]+>', '', content)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        lines = [line.strip() for line in content.split('\n') if line.strip()]
        
        return '\n'.join(lines)
    
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {str(e)}"

def download_and_clean_subtitles(video_url, language='ru'):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç —Å—É–±—Ç–∏—Ç—Ä—ã
    """
    with tempfile.TemporaryDirectory() as temp_dir:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è yt-dlp
        ydl_opts = {
            'writesubtitles': True,
            'writeautomaticsub': True,
            'subtitleslangs': [language],
            'skip_download': True,
            'outtmpl': f'{temp_dir}/%(title)s.%(ext)s',
            'subtitlesformat': 'srt',
        }
        
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
                info = ydl.extract_info(video_url, download=False)
                video_title = info.get('title', 'Unknown')
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã
                ydl.download([video_url])
                
                # –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å—É–±—Ç–∏—Ç—Ä–æ–≤
                subtitle_file = None
                for file in os.listdir(temp_dir):
                    if file.endswith(f'.{language}.srt'):
                        subtitle_file = os.path.join(temp_dir, file)
                        break
                
                if subtitle_file and os.path.exists(subtitle_file):
                    cleaned_text = clean_subtitles(subtitle_file)
                    return {
                        'success': True,
                        'video_title': video_title,
                        'subtitles': cleaned_text,
                        'language': language
                    }
                else:
                    return {
                        'success': False,
                        'error': f'–°—É–±—Ç–∏—Ç—Ä—ã –Ω–∞ —è–∑—ã–∫–µ {language} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                    }
                    
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }

@app.route('/', methods=['GET'])
def home():
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    """
    return """
    <h1>üé¨ YouTube Subtitle API</h1>
    <h2>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</h2>
    <p><strong>POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /subtitles</strong></p>
    <p>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã JSON:</p>
    <ul>
        <li><code>url</code> - URL YouTube –≤–∏–¥–µ–æ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</li>
        <li><code>language</code> - –∫–æ–¥ —è–∑—ã–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ru)</li>
    </ul>
    
    <h3>–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:</h3>
    <pre>
POST /subtitles
Content-Type: application/json

{
    "url": "https://www.youtube.com/watch?v=VIDEO_ID",
    "language": "ru"
}
    </pre>
    
    <h3>–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:</h3>
    <pre>
{
    "success": true,
    "video_title": "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ",
    "subtitles": "–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤...",
    "language": "ru"
}
    </pre>
    
    <h3>–ö–æ–¥—ã —è–∑—ã–∫–æ–≤:</h3>
    <ul>
        <li>ru - —Ä—É—Å—Å–∫–∏–π</li>
        <li>en - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π</li>
        <li>es - –∏—Å–ø–∞–Ω—Å–∫–∏–π</li>
        <li>fr - —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π</li>
        <li>de - –Ω–µ–º–µ—Ü–∫–∏–π</li>
    </ul>
    """

@app.route('/subtitles', methods=['POST'])
def get_subtitles():
    """
    API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    """
    try:
        data = request.get_json()
        
        if not data or 'url' not in data:
            return jsonify({
                'success': False,
                'error': 'URL –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            }), 400
        
        video_url = data['url']
        language = data.get('language', 'ru')
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
        if 'youtube.com' not in video_url and 'youtu.be' not in video_url:
            return jsonify({
                'success': False,
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π YouTube URL'
            }), 400
        
        result = download_and_clean_subtitles(video_url, language)
        
        if result['success']:
            return jsonify(result), 200
        else:
            return jsonify(result), 404
            
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500

@app.route('/health', methods=['GET'])
def health():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
    """
    return jsonify({'status': 'ok'}), 200

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ YouTube Subtitle API —Å–µ—Ä–≤–µ—Ä–∞...")
    print("üìù –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞: http://0.0.0.0:5000/")
    app.run(host='0.0.0.0', port=5000, debug=True)
